#+TITLE: Inkwell emacs
#+SUBTITLE: One modern, fast, and visually appealing Emacs configuration
#+AUTHOR:  Elon Li
#+DATE: <2023-08-15 TUE>

#+STARTUP: overview

* early-init.el
:PROPERTIES:
:HEADER-ARGS: :tangle early-init.el
:END:

在Emacs刚启动，还未加载主要配置文件时的配置文件。

#+BEGIN_SRC emacs-lisp
  ;;; early-init.el --- Emacs pre-initialization config -*- lexical-binding: t -*-
  ;;; Commentary:

  ;;; Code:

  ;; 设置垃圾回收参数
(setq gc-cons-threshold most-positive-fixnum)
(setq gc-cons-percentage 0.6)

;; 启动早期不加载`package.el'包管理器
(setq package-enable-at-startup nil)
;; 不从包缓存中加载
(setq package-quickstart nil)

;; 禁止展示菜单栏、工具栏和纵向滚动条
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

;; 禁止自动缩放窗口先
(setq frame-inhibit-implied-resize t)

;; 禁止菜单栏、工具栏、滚动条模式，禁止启动屏幕和文件对话框
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-splash-screen t)
(setq use-file-dialog nil)

;; 在这个阶段不编译
(setq comp-deferred-compilation nil)

(provide 'early-init)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; early-init.el ends here
#+END_SRC

* init.el
:PROPERTIES:
:HEADER-ARGS: :tangle init.el
:END:

=init.el= 是Emacs的主要配置文件。

** init.el 文件头
#+BEGIN_SRC emacs-lisp
;;; init.el --- The main init entry for Emacs -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:

#+END_SRC

** package包管理配置
设置镜像为中科大源

#+begin_src emacs-lisp
(require 'package)
(setq package-archives
      '(("melpa-stable" . "https://mirrors.ustc.edu.cn/elpa/stable-melpa/")
	("melpa"  . "https://mirrors.ustc.edu.cn/elpa/melpa/")
	("gnu"    . "https://mirrors.ustc.edu.cn/elpa/gnu/")
	("gnu-devel" . "https://mirrors.ustc.edu.cn/elpa/gnu-devel/")
	("nognu-devel" . "https://mirrors.ustc.edu.cn/elpa/nongnu-devel/")
	("nongnu" . "https://mirrors.ustc.edu.cn/elpa/nongnu/")))

(package-initialize)
#+end_src

** 安装use-package插件
[[https://github.com/jwiegley/use-package][use-package]] 是一个让Emacs配置更加结构化更加清晰的一个宏插件。

#+begin_src emacs-lisp
;; 安装 `use-package'
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; 配置 `use-package'
(eval-and-compile
  (setq use-package-always-ensure nil)
  (setq use-package-always-defer nil)
  (setq use-package-expand-minimally nil)
  (setq use-package-enable-imenu-support t)
  (if (daemonp)
	  (setq use-package-always-demand t)))

(eval-when-compile
  (require 'use-package))

;; 安装 `use-package' 的集成模块
(use-package use-package-ensure-system-package
  :ensure t)
(use-package diminish
  :ensure t)
(use-package bind-key
  :ensure t)
#+end_src

** quelpa包管理器
[[https://github.com/quelpa/quelpa][quelpa]] 是配合 =package.el= 使用的，基于git的一个包管理器。
#+BEGIN_SRC emacs-lisp
;; 安装 `quelpa'
(use-package quelpa
  :ensure t
  :commands quelpa
  :config
  :custom
  (quelpa-git-clone-depth 1)
  (quelpa-update-melpa-p nil)
  (quelpa-self-upgrade-p nil)
  (quelpa-checkout-melpa-p nil))

;; `quelpa' 与 `use-package' 集成
(use-package quelpa-use-package
  :ensure t)
#+END_SRC

** find-config
#+BEGIN_SRC emacs-lisp
(defun open-custom-post-file()
  "This functions dose finde custom-post.el."
  (interactive)
  (find-file "~/.emacs.d/emacs-config.org"))
(global-set-key (kbd "<f5>") 'open-custom-post-file)
#+END_SRC

** 加载模块化配置

#+BEGIN_SRC emacs-lisp
  ;; 将lisp目录放到加载路径的前面以加快启动速度
  (let ((dir (locate-user-emacs-file "lisp")))
    (add-to-list 'load-path (file-name-as-directory dir)))

  ;; 加载各模块化配置
  ;; 不要在`*message*'缓冲区显示加载模块化配置的信息
  (with-temp-message ""
    (require 'init-base)                  ; 基础设置
    (require 'init-ui)                    ; UI交互
    (require 'init-edit)                  ; 编辑设置
    (require 'init-org)                   ; org配置
    (require 'init-complete)              ; 补全设置
    (require 'init-tools)                 ; 常用工具
    (require 'init-language)              ; 编程语言
    (require 'init-hugo)                  ; 发布博客设置
    )
#+END_SRC

** init.el 文件尾
#+BEGIN_SRC emacs-lisp

(provide 'init)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init.el ends here
#+END_SRC

* init-base.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-base.el :mkdirp yes
:END:
基础设置

** init-base.el文件头
#+BEGIN_SRC emacs-lisp
;;; init-base.el -- hugo settings -*-  lexical-binding: t -*-
;;; Commentary:

;;; Code:
#+END_SRC

** 基本设置
#+BEGIN_SRC emacs-lisp
;; 禁用一些GUI特性
(setq use-dialog-box nil)               ; 鼠标操作不使用对话框
(setq inhibit-default-init t)           ; 不加载 `default' 库
(setq inhibit-startup-screen t)         ; 不加载启动画面
(setq inhibit-startup-message t)        ; 不加载启动消息
(setq inhibit-startup-buffer-menu t)    ; 不显示缓冲区列表

;; 草稿缓冲区默认文字设置
(setq initial-scratch-message (concat ";; Happy hacking, "
                                      (capitalize user-login-name) " - Emacs ♥ you!\n\n"))

;; 设置缓冲区的文字方向为从左到右
(setq bidi-paragraph-direction 'left-to-right)
;; 禁止使用双向括号算法
;; (setq bidi-inhibit-bpa t)

;; 设置自动折行宽度为80个字符，默认值为70
(setq-default fill-column 80)

;; 设置大文件阈值为100MB，默认10MB
(setq large-file-warning-threshold 100000000)

;; 以16进制显示字节数
(setq display-raw-bytes-as-hex t)
;; 有输入时禁止 `fontification' 相关的函数钩子，能让滚动更顺滑
(setq redisplay-skip-fontification-on-input t)

;; 禁止响铃
(setq ring-bell-function 'ignore)

;; 禁止闪烁光标
(blink-cursor-mode -1)

;; 在光标处而非鼠标所在位置粘贴
(setq mouse-yank-at-point t)

;; 拷贝粘贴设置
(setq select-enable-primary nil)        ; 选择文字时不拷贝
(setq select-enable-clipboard t)        ; 拷贝时使用剪贴板

;; 鼠标滚动设置
(setq scroll-step 2)
(setq scroll-margin 2)
(setq hscroll-step 2)
(setq hscroll-margin 2)
(setq scroll-conservatively 101)
(setq scroll-up-aggressively 0.01)
(setq scroll-down-aggressively 0.01)
(setq scroll-preserve-screen-position 'always)

(setq pixel-scroll-precision-mode t)

;; 对于高的行禁止自动垂直滚动
(setq auto-window-vscroll nil)

;; 设置新分屏打开的位置的阈值
(setq split-width-threshold (assoc-default 'width default-frame-alist))
(setq split-height-threshold nil)

;; TAB键设置，在Emacs里不使用TAB键，所有的TAB默认为4个空格
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

;; yes或no提示设置，通过下面这个函数设置当缓冲区名字匹配到预设的字符串时自动回答yes
(setq original-y-or-n-p 'y-or-n-p)
(defalias 'original-y-or-n-p (symbol-function 'y-or-n-p))
(defun default-yes-sometimes (prompt)
  "automatically say y when buffer name match following string"
  (if (or
	   (string-match "has a running process" prompt)
	   (string-match "does not exist; create" prompt)
	   (string-match "modified; kill anyway" prompt)
	   (string-match "Delete buffer using" prompt)
	   (string-match "Kill buffer of" prompt)
	   (string-match "still connected.  Kill it?" prompt)
	   (string-match "Shutdown the client's kernel" prompt)
	   (string-match "kill them and exit anyway" prompt)
	   (string-match "Revert buffer from file" prompt)
	   (string-match "Kill Dired buffer of" prompt)
	   (string-match "delete buffer using" prompt)
       (string-match "Kill all pass entry" prompt)
       (string-match "for all cursors" prompt)
	   (string-match "Do you want edit the entry" prompt))
	  t
    (original-y-or-n-p prompt)))
(defalias 'yes-or-no-p 'default-yes-sometimes)
(defalias 'y-or-n-p 'default-yes-sometimes)

;; 设置剪贴板历史长度300，默认为60
(setq kill-ring-max 200)

;; 在剪贴板里不存储重复内容
(setq kill-do-not-save-duplicates t)

;; 设置位置记录长度为6，默认为16
;; 可以使用 `counsel-mark-ring' or `consult-mark' (C-x j) 来访问光标位置记录
;; 使用 C-x C-SPC 执行 `pop-global-mark' 直接跳转到上一个全局位置处
;; 使用 C-u C-SPC 跳转到本地位置处
(setq mark-ring-max 6)
(setq global-mark-ring-max 6)

;; 设置 emacs-lisp 的限制
(setq max-lisp-eval-depth 10000)        ; 默认值为 800
(setq max-specpdl-size 10000)           ; 默认值为 1600

;; 启用 `list-timers', `list-threads' 这两个命令
(put 'list-timers 'disabled nil)
(put 'list-threads 'disabled nil)

;; (that uses mouse-select/middle-button-click)
(setq x-select-enable-clipboard t)

;; If emacs is run in a terminal, the clipboard- functions have no
;; effect. Instead, we use of xsel, see
;; http://www.vergenet.net/~conrad/software/xsel/ -- "a command-line
;; program for getting and setting the contents of the X selection"
(unless window-system
 (when (getenv "DISPLAY")
  ;; Callback for when user cuts
  (defun xsel-cut-function (text &optional push)
    ;; Insert text to temp-buffer, and "send" content to xsel stdin
    (with-temp-buffer
      (insert text)
      ;; I prefer using the "clipboard" selection (the one the
      ;; typically is used by c-c/c-v) before the primary selection
      ;; (that uses mouse-select/middle-button-click)
      (call-process-region (point-min) (point-max) "xsel" nil 0 nil "--clipboard" "--input")))
  ;; Call back for when user pastes
  (defun xsel-paste-function()
    ;; Find out what is current selection by xsel. If it is different
    ;; from the top of the kill-ring (car kill-ring), then return
    ;; it. Else, nil is returned, so whatever is in the top of the
    ;; kill-ring will be used.
    (let ((xsel-output (shell-command-to-string "xsel --clipboard --output")))
      (unless (string= (car kill-ring) xsel-output)
	xsel-output )))
  ;; Attach callbacks to hooks
  (setq interprogram-cut-function 'xsel-cut-function)
  (setq interprogram-paste-function 'xsel-paste-function)
  ;; Idea from
  ;; http://shreevatsa.wordpress.com/2006/10/22/emacs-copypaste-and-x/
  ;; http://www.mail-archive.com/help-gnu-emacs@gnu.org/msg03577.html
 ))


;; 启用xterm-mouse-mode以支持鼠标选择文本
(xterm-mouse-mode 1)

;; 启用x-clipboard集成
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

;; 退出Emacs时进行确认
(setq confirm-kill-emacs 'y-or-n-p)

;; 在模式栏上显示当前光标的列号
(column-number-mode t)

#+END_SRC

** 编码设置
#+BEGIN_SRC emacs-lisp
  ;; 配置所有的编码为UTF-8，参考：
  ;; https://thraxys.wordpress.com/2016/01/13/utf-8-in-emacs-everywhere-forever/
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-language-environment 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (set-file-name-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (modify-coding-system-alist 'process "*" 'utf-8)
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC

** line-number-mode
#+BEGIN_SRC emacs-lisp
  ;; 在编程模式下显示行号
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  ;; 在其他模式下禁用行号显示
  (global-display-line-numbers-mode -1)
#+END_SRC

** no-littering让配置目录简洁
#+BEGIN_SRC emacs-lisp
  (use-package no-littering
    :ensure t)
#+END_SRC

** saveplace记住每个文件的光标位置
#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :ensure nil
    :hook (after-init . save-place-mode))
#+END_SRC

** recentf最近打开的文件历史
#+BEGIN_SRC emacs-lisp
  (use-package recentf
  :ensure nil
  :defines no-littering-etc-directory no-littering-var-directory
  :hook (after-init . recentf-mode)
  :custom
  (recentf-max-saved-items 300)
  (recentf-auto-cleanup 'never)
  ;; `recentf-add-file' will apply handlers first, then call `string-prefix-p'
  ;; to check if it can be pushed to recentf list.
  (recentf-filename-handlers '(abbreviate-file-name))
  (recentf-exclude `(,@(cl-loop for f in `(,package-user-dir
                                           ,no-littering-var-directory
                                           ,no-littering-etc-directory)
                                collect (abbreviate-file-name f))
                     ;; Folders on MacOS start
                     "^/private/tmp/"
                     "^/var/folders/"
                     ;; Folders on MacOS end
                     ".cache"
                     ".cask"
                     ".elfeed"
                     "elfeed"
                     "bookmarks"
                     "cache"
                     "ido.*"
                     "persp-confs"
                     "recentf"
                     "undo-tree-hist"
                     "url"
                     "^/tmp/"
                     "/ssh\\(x\\)?:"
                     "/su\\(do\\)?:"
                     "^/usr/include/"
                     "/TAGS\\'"
                     "COMMIT_EDITMSG\\'")))
#+END_SRC

** savehist
#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :ensure nil
    :hook (after-init . savehist-mode)
    :config
    ;; Allow commands in minibuffers, will affect `dired-do-dired-do-find-regexp-and-replace' command:
    (setq enable-recursive-minibuffers t)
    (setq history-length 1000)
    (setq savehist-additional-variables '(mark-ring
                                          global-mark-ring
                                          search-ring
                                          regexp-search-ring
                                          extended-command-history))
    (setq savehist-autosave-interval 300))
#+END_SRC

** crux
#+BEGIN_SRC emacs-lisp
(use-package crux
  :ensure t
  :bind (("C-a" . crux-move-beginning-of-line)
         ("C-x 4 t" . crux-transpose-windows)
         ("C-x K" . crux-kill-other-buffers)
         ("C-k" . crux-smart-kill-line)
         ("C-c r" . crux-rename-file-and-buffer)
         ("C-x DEL" . crux-kill-line-backwards))
  :config
  (crux-with-region-or-buffer indent-region)
  (crux-with-region-or-buffer untabify)
  (crux-with-region-or-point-to-eol kill-ring-save)
  (defalias 'rename-file-and-buffer #'crux-rename-file-and-buffer))
#+END_SRC

** restart-emacs

#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs
  :ensure t
  :bind
  (("C-c C-x r" . restart-emacs))
  )
#+END_SRC

** 关闭自动备份

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)                                  ; 不自动备份
(setq auto-save-default nil)                                  ; 不使用Emacs自带的自动保存
#+END_SRC

** 自动加载
#+BEGIN_SRC emacs-lisp
(use-package autorevert
  :ensure nil
  :hook (after-init . global-auto-revert-mode)
  :bind ("s-u" . revert-buffer)
  :custom
  (auto-revert-interval 10)
  (auto-revert-avoid-polling t)
  (auto-revert-verbose nil)
  (auto-revert-remote-files t)
  (auto-revert-check-vc-info t)
  (global-auto-revert-non-file-buffers t))
#+END_SRC

** Swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :bind (("C-s" . swiper)
         )
  )
#+END_SRC


** init-base.el 文件尾
#+BEGIN_SRC emacs-lisp

(provide 'init-base)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-base.el ends here
#+END_SRC

* init-ui.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-ui.el :mkdirp yes
:END:
外观设置

** init-ui.el文件头
#+BEGIN_SRC emacs-lisp
;;; init-ui.el -- hugo settings -*-  lexical-binding: t -*-
;;; Commentary:

;;; Code:
#+END_SRC

** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :init
    (progn
      ;; Set the title
      (setq dashboard-banner-logo-title "Welcom Inkwell Emacs")
      ;; Set the banner
      (setq dashboard-startup-banner "/home/elon/.emacs.d/logo.png")
      ;; Content is not centered by default. To center, set
      (setq dashboard-center-content t)
      (setq dashboard-set-heading-icons t)
      (setq dashboard-icon-type 'all-the-icons)
      (setq dashboard-set-file-icons t)
      )
    :config
    (dashboard-setup-startup-hook)

    ;; Customize the dashboard items
    (setq dashboard-items '((recents . 6)
                            (bookmarks . 6)
                            ))
    )
#+END_SRC

** keycast按键展示
#+BEGIN_SRC emacs-lisp
(use-package keycast
  :ensure t
  :hook (after-init . keycast-mode)
  :config
  ;; set for doom-modeline support
  ;; With the latest change 72d9add, mode-line-keycast needs to be modified to keycast-mode-line.
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line (fix for use with doom-mode-line)."
    :global t
    (if keycast-mode
        (progn
          (add-hook 'pre-command-hook 'keycast--update t)
          (add-to-list 'global-mode-string '("" keycast-mode-line "  ")))
      (remove-hook 'pre-command-hook 'keycast--update)
      (setq global-mode-string (delete '("" keycast-mode-line "  ") global-mode-string))
      ))

  (dolist (input '(self-insert-command
                   org-self-insert-command))
    (add-to-list 'keycast-substitute-alist `(,input "." "Typing…")))

  (dolist (event '(mouse-event-p
                   mouse-movement-p
                   mwheel-scroll))
    (add-to-list 'keycast-substitute-alist `(,event nil)))

  (setq keycast-log-format "%-20K%C\n")
  (setq keycast-log-frame-alist
        '((minibuffer . nil)))
  (setq keycast-log-newest-first t)
  )
#+END_SRC

** doom-modelien
#+BEGIN_SRC emacs-lisp
(use-package nyan-mode
  :ensure t
  :init (nyan-mode))

(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode)
  :config
  (display-time-mode t)
  (setq doom-modeline-time t)
 )
#+END_SRC

** doom-themes
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-moonlight t)
  )
#+END_SRC

** font-setting
#+BEGIN_SRC emacs-lisp
  (use-package fontaine
    :ensure t
    :when (display-graphic-p)
    ;; :hook (kill-emacs . fontaine-store-latest-preset)
    :config
    (setq fontaine-latest-state-file
	  (locate-user-emacs-file "etc/fontaine-latest-state.eld"))
    (setq fontaine-presets
	  '((regular
	     :default-height 140
	     :default-weight regular
	     :fixed-pitch-height 1.0
	     :variable-pitch-height 1.0
	     )
	    (large
	     :default-height 180
	     :default-weight normal
	     :fixed-pitch-height 1.0
	     :variable-pitch-height 1.05
	     )
	    (t
	     :default-family "Source Code Pro"
             :fixed-pitch-family "Source Code Pro"
             :variable-pitch-family "Source Code Pro"
             :italic-family "Source Code Pro"
	     :variable-pitch-weight normal
	     :bold-weight normal
	     :italic-slant italic
	     :line-spacing 0.1)
	    ))
    ;; (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular))
    (fontaine-set-preset 'regular)

    ;; set emoji font
    (set-fontset-font
     t
     (if (version< emacs-version "28.2")
	 '(#x1f300 . #x1fad0)
       'emoji)
     (cond
      ((member "Noto Emoji" (font-family-list)) "Noto Emoji")
      ((member "Symbola" (font-family-list)) "Symbola")
      ((member "Noto Color Emoji" (font-family-list)) "Noto Color Emoji")
      ((member "Segoe UI Emoji" (font-family-list)) "Segoe UI Emoji")
      ))

     ;; set Chinese font
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-fontset-font
       (frame-parameter nil 'font)
       charset
       (font-spec :family
		  (cond
		   ((eq system-type 'darwin)
		    (cond
		     ((member "Sarasa Term SC Nerd" (font-family-list)) "Sarasa Term SC Nerd")
		     ((member "PingFang SC" (font-family-list)) "PingFang SC")
		     ((member "WenQuanYi Zen Hei" (font-family-list)) "WenQuanYi Zen Hei")
		     ((member "Microsoft YaHei" (font-family-list)) "Microsoft YaHei")
		     ))
		   ((eq system-type 'gnu/linux)
		    (cond
		     ((member "Sarasa Term SC Nerd" (font-family-list)) "Sarasa Term SC Nerd")
		     ((member "WenQuanYi Zen Hei" (font-family-list)) "WenQuanYi Zen Hei")		     
		     ))
		   (t
		    (cond
		     ((member "Sarasa Term SC Nerd" (font-family-list)) "Sarasa Term SC Nerd")
		     ((member "Microsoft YaHei" (font-family-list)) "Microsoft YaHei")
		     )))
		  )))
    
    ;; set Chinese font scale
 (setq face-font-rescale-alist `(
                                  ("Symbola"             . 1.3)
                                  ("Microsoft YaHei"     . 1.2)
                                  ("WenQuanYi Zen Hei"   . 1.2)
                                  ("Sarasa Term SC Nerd" . 1.2)
                                  ("PingFang SC"         . 1.16)
                                  ("Lantinghei SC"       . 1.16)
                                  ("Kaiti SC"            . 1.16)
                                  ("Yuanti SC"           . 1.16)
                                  ("Apple Color Emoji"   . 0.91)
                                  ))
    
 )

(defun set-emacsclient-font ()
  "Set the font for Emacs client frames."
  (let ((chinese-font "Sarasa Term SC Nerd")   ; 设置中文字体名称
        (english-font "Source Code Pro")        ; 设置英文字体名称
        (font-size 18)                         ; 设置字体大小
        (chinese-font-scale 1.2))               ; 设置中文字体缩放比例
    (set-face-attribute 'default nil :family english-font :height (* font-size 10))
    (set-fontset-font t 'han (font-spec :family chinese-font))
    (setq face-font-rescale-alist `((,chinese-font . ,chinese-font-scale)))))

(add-hook 'after-make-frame-functions
          (lambda (frame)
            (select-frame frame)
            (when (window-system frame)
              (set-emacsclient-font))))

(set-emacsclient-font) ; 在非 GUI 模式下设置默认字体



#+END_SRC

#+CAPTION: 测试中英文字体对齐
#+NAME: 测试中英文字体对齐
| 中文 |   |
| abcd |   |

** nerd-icons
#+BEGIN_SRC emacs-lisp
(use-package nerd-icons
  :ensure t
  ;; :custom
  ;; The Nerd Font you want to use in GUI
  ;; "Symbols Nerd Font Mono" is the default and is recommended
  ;; but you can use any other Nerd Font if you want
  ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
  )
#+END_SRC

** init-ui.el 文件尾
#+BEGIN_SRC emacs-lisp

(provide 'init-ui)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-ui.el ends here
#+END_SRC

* init-edit.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-edit.el :mkdirp yes
:END:
编辑设置

** init-edit.el文件头
#+BEGIN_SRC emacs-lisp
;;; init-edit.el -- hugo settings -*-  lexical-binding: t -*-
;;; Commentary:

;;; Code:
#+END_SRC

** ace-window
#+BEGIN_SRC emacs-lisp
    (use-package ace-window
    :ensure t
    :init
    (setq aw-keys '(?1 ?2 ?3 ?4 ?5 ?6 ?7 ?8 ?9))
    :config
    ;; 增大数字跳转显示的字体大小
    (custom-set-faces
     '(aw-leading-char-face ((t (:height 2.0 :foreground "red")))))
    :bind (("C-x o" . ace-window))
    )
  
#+END_SRC

** 恢复单屏
#+BEGIN_SRC emacs-lisp
(defun my-kill-buffer-and-close-window ()
  "Kill the current buffer and close its window."
  (interactive)
  (let ((current-window (selected-window))
        (buffer-to-kill (current-buffer)))
    (kill-buffer buffer-to-kill)
    (delete-window current-window)))

(global-set-key (kbd "C-x k") 'my-kill-buffer-and-close-window)
#+END_SRC

** good-scroll
#+BEGIN_SRC emacs-lisp
;; (use-package good-scroll
;;   :ensure t
;;   :if window-system          ; 在图形化界面时才使用这个插件
;;   :init (good-scroll-mode))
#+END_SRC

** multiple-cursors多光标编辑
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind-keymap ("C-c o" . multiple-cursors-map)
  :bind (("C-`"   . mc/mark-next-like-this)
         ;;("C-\\"  . mc/unmark-next-like-this)
         :map multiple-cursors-map
              ("SPC" . mc/edit-lines)
              (">"   . mc/mark-next-like-this)
              ("<"   . mc/mark-previous-like-this)
              ("a"   . mc/mark-all-like-this)
              ("n"   . mc/mark-next-like-this-word)
              ("p"   . mc/mark-previous-like-this-word)
              ("r"   . set-rectangular-region-anchor)
              )
  :config
  (defvar multiple-cursors-map nil "keymap for `multiple-cursors")
  (setq multiple-cursors-map (make-sparse-keymap))
  (setq mc/list-file (concat user-emacs-directory "/etc/mc-lists.el"))
  (setq mc/always-run-for-all t)
  )
#+END_SRC

** delsel选择文本输入时直接替换
#+BEGIN_SRC emacs-lisp
;; Directly modify when selecting text
(use-package delsel
  :ensure t
  :hook (after-init . delete-selection-mode))
#+END_SRC

** avy光标移动
#+BEGIN_SRC emacs-lisp
    (use-package avy
      :ensure t
      :bind (("C-." . my/avy-goto-char-timer)
	     ("C-。" . my/avy-goto-char-timer)
	     :map isearch-mode-map
	     ("C-." . avy-isearch))
      :config
      ;; Make `avy-goto-char-timer' support pinyin, refer to:
      ;; https://emacs-china.org/t/avy-avy-goto-char-timer/20900/2
      (defun my/avy-goto-char-timer (&optional arg)
	"Make avy-goto-char-timer support pinyin"
	(interactive "P")
	(let ((avy-all-windows (if arg
				   (not avy-all-windows)
				 avy-all-windows)))
	  (avy-with avy-goto-char-timer
	    (setq avy--old-cands (avy--read-candidates
				  'pinyinlib-build-regexp-string))
	    (avy-process avy--old-cands))))

      (defun avy-action-kill-whole-line (pt)
	"avy action: kill the whole line where avy selection is"
	(save-excursion
	  (goto-char pt)
	  (kill-whole-line))
	(select-window
	 (cdr
	  (ring-ref avy-ring 0)))
	t)

      (defun avy-action-copy-whole-line (pt)
	"avy action: copy the whole line where avy selection is"
	(save-excursion
	  (goto-char pt)
	  (cl-destructuring-bind (start . end)
	      (bounds-of-thing-at-point 'line)
	    (copy-region-as-kill start end)))
	(select-window
	 (cdr
	  (ring-ref avy-ring 0)))
	t)

      (defun avy-action-yank-whole-line (pt)
	"avy action: copy the line where avy selection is and paste to current point"
	(avy-action-copy-whole-line pt)
	(save-excursion (yank))
	t)

      (defun avy-action-teleport-whole-line (pt)
	"avy action: kill the line where avy selection is and paste to current point"
	(avy-action-kill-whole-line pt)
	(save-excursion (yank)) t)

      (defun avy-action-helpful (pt)
	"avy action: get helpful information at point"
	(save-excursion
	  (goto-char pt)
	  (helpful-at-point))
	;; (select-window
	;;  (cdr (ring-ref avy-ring 0)))
	t)

      (defun avy-action-mark-to-char (pt)
	"avy action: mark from current point to avy selection"
	(activate-mark)
	(goto-char pt))

      (defun avy-action-flyspell (pt)
	"avy action: flyspell the word where avy selection is"
	(save-excursion
	  (goto-char pt)
	  (when (require 'flyspell nil t)
	    (flyspell-correct-wrapper))))

      (defun avy-action-define (pt)
	"avy action: define the word in dictionary where avy selection is"
	(save-excursion
	  (goto-char pt)
	  (fanyi-dwim2)))

      (defun avy-action-embark (pt)
	"avy action: embark where avy selection is"
	(unwind-protect
	    (save-excursion
	      (goto-char pt)
	      (embark-act))
	  (select-window
	   (cdr (ring-ref avy-ring 0))))
	t)

      (defun avy-action-google (pt)
	"avy action: google the avy selection when it is a word or browse it when it is a link"
	(save-excursion
	  (goto-char pt)
	  (my/search-or-browse)))

      (setf (alist-get ?k avy-dispatch-alist) 'avy-action-kill-stay
	    (alist-get ?K avy-dispatch-alist) 'avy-action-kill-whole-line
	    (alist-get ?w avy-dispatch-alist) 'avy-action-copy
	    (alist-get ?W avy-dispatch-alist) 'avy-action-copy-whole-line
	    (alist-get ?y avy-dispatch-alist) 'avy-action-yank
	    (alist-get ?Y avy-dispatch-alist) 'avy-action-yank-whole-line
	    (alist-get ?t avy-dispatch-alist) 'avy-action-teleport
	    (alist-get ?T avy-dispatch-alist) 'avy-action-teleport-whole-line
	    (alist-get ?H avy-dispatch-alist) 'avy-action-helpful
	    (alist-get ?  avy-dispatch-alist) 'avy-action-mark-to-char
	    (alist-get ?\; avy-dispatch-alist) 'avy-action-flyspell
	    (alist-get ?= avy-dispatch-alist) 'avy-action-define
	    (alist-get ?o avy-dispatch-alist) 'avy-action-embark
	    (alist-get ?G avy-dispatch-alist) 'avy-action-google
	    )

      :custom
      ;; (avy-case-fold-search t)              ; default is t
      (avy-timeout-seconds 1.0)
      (avy-all-windows t)
      (avy-background t)
      (avy-keys '(?a ?s ?d ?f ?g ?h ?j ?l ?q ?e ?r ?u ?i ?p ?n))
      )
#+END_SRC
** init-edit.el 文件尾
#+BEGIN_SRC emacs-lisp

(provide 'init-edit)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-edit.el ends here
#+END_SRC

* init-org.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-org.el :mkdirp yes
:END:

** init-org.el 文件头

#+BEGIN_SRC emacs-lisp
;;; init-org.el --- Org mode settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:

#+END_SRC

** org-mode
#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure nil
  :mode ("\\.org\\'" . org-mode)
  :hook ((org-mode . visual-line-mode)
	 (org-mode . my/org-prettify-symbols))
  :commands (org-find-exact-headline-in-buffer org-set-tags)
  :custom-face
  ;; 设置Org mode标题以及每级标题行的大小
  (org-document-title ((t (:height 1.75 :weight bold))))
  (org-level-1 ((t (:height 1.2 :weight bold))))
  (org-level-2 ((t (:height 1.15 :weight bold))))
  (org-level-3 ((t (:height 1.1 :weight bold))))
  (org-level-4 ((t (:height 1.05 :weight bold))))
  (org-level-5 ((t (:height 1.0 :weight bold))))
  (org-level-6 ((t (:height 1.0 :weight bold))))
  (org-level-7 ((t (:height 1.0 :weight bold))))
  (org-level-8 ((t (:height 1.0 :weight bold))))
  (org-level-9 ((t (:height 1.0 :weight bold))))
  :config
  ;; ================================
  ;; 在org mode里美化字符串
  ;; ================================
  (defun my/org-prettify-symbols ()
    (interactive)
    (setq prettify-symbols-alist
	  (mapcan (lambda (x) (list x (cons (upcase (car x)) (cdr x))))
		  '(
		    ("[ ]"              . 9744)         ; ☐
		    ("[X]"              . 9745)         ; ☑
		    ("[-]"              . 8863)         ; ⊟
		    ("#+begin_src"      . 9998)         ; ✎
		    ("#+end_src"        . 9633)         ; □
		    ("#+begin_ai"       . 9883)         ; ⚛
		    ("#+end_ai"         . 9998)         ; ✎
		    ("#+begin_example"  . 129083)       ; 🌛
		    ("#+end_example"    . 129081)       ; 🌙
		    ("#+results:"       . 9776)         ; ☰
		    ("#+attr_latex:"    . "🄛")
		    ("#+attr_html:"     . "🄗")
		    ("#+attr_org:"      . "🄞")
		    ("#+name:"          . "🄝")         ; 127261
		    ("#+caption:"       . "🄒")         ; 127250
		    ("#+date:"          . "📅")         ; 128197
		    ("#+author:"        . "💁")         ; 128100
		    ("#+setupfile:"     . 128221)       ; 📝
		    ("#+email:"         . 128231)       ; 📧
		    ("#+startup:"       . 10034)        ; ✲
		    ("#+options:"       . 9965)         ; ⛭
		    ("#+title:"         . 10162)        ; ➲
		    ("#+subtitle:"      . 11146)        ; ⮊
		    ("#+downloaded:"    . 8650)         ; ⇊
		    ("#+language:"      . 128441)       ; 🖹
		    ("#+begin_quote"    . 187)          ; »
		    ("#+end_quote"      . 171)          ; «
                    ("#+begin_results"  . 8943)         ; ⋯
                    ("#+end_results"    . 8943)         ; ⋯
		    )))
    (setq prettify-symbols-unprettify-at-point t)
    (prettify-symbols-mode 1))

  ;; 提升latex预览的图片清晰度
  (plist-put org-format-latex-options :scale 1.8)

  ;; 设置标题行之间总是有空格；列表之间根据情况自动加空格
  (setq org-blank-before-new-entry '((heading . t)
				     (plain-list-item . auto)
				     ))

  (setq org-clock-sound "~/.emacs.d/ding.wav")

  (setq org-latex-listings 'minted)

  ;; ======================================
  ;; 设置打开Org links的程序
  ;; ======================================
  (defun my-func/open-and-play-gif-image (file &optional link)
    "Open and play GIF image `FILE' in Emacs buffer.

Optional for Org-mode file: `LINK'."
    (let ((gif-image (create-image file))
	  (tmp-buf (get-buffer-create "*Org-mode GIF image animation*")))
      (switch-to-buffer tmp-buf)
      (erase-buffer)
      (insert-image gif-image)
      (image-animate gif-image nil t)
      (local-set-key (kbd "q") 'bury-buffer)
      ))
  (setq org-file-apps '(("\\.png\\'"     . default)
                        (auto-mode       . emacs)
                        (directory       . emacs)
                        ("\\.mm\\'"      . default)
                        ("\\.x?html?\\'" . default)
                        ("\\.pdf\\'"     . emacs)
                        ("\\.md\\'"      . emacs)
                        ("\\.gif\\'"     . my-func/open-and-play-gif-image)
                        ("\\.xlsx\\'"    . default)
                        ("\\.svg\\'"     . default)
                        ("\\.pptx\\'"    . default)
                        ("\\.docx\\'"    . default)))

  :custom
  ;; 设置Org mode的目录
  (org-directory "~/org")
  ;; 设置笔记的默认存储位置
  (org-default-notes-file (expand-file-name "capture.org" org-directory))
  ;; 启用一些子模块
  (org-modules '(ol-bibtex ol-gnus ol-info ol-eww org-habit org-protocol))
  ;; 在按M-RET时，是否根据光标所在的位置分行，这里设置为是
  ;; (org-M-RET-may-split-line '((default . nil)))
  ;; 一些Org mode自带的美化设置
  ;; 标题行美化
  (org-fontify-whole-heading-line t)
  ;; 设置标题行折叠符号
  (org-ellipsis " ▾")
  ;; 在活动区域内的所有标题栏执行某些命令
  (org-loop-over-headlines-in-active-region t)
  ;; TODO标签美化
  (org-fontify-todo-headline t)
  ;; DONE标签美化
  (org-fontify-done-headline t)
  ;; 引用块美化
  (org-fontify-quote-and-verse-blocks t)
  ;; 隐藏宏标记
  (org-hide-macro-markers t)
  ;; 隐藏强调标签
  (org-hide-emphasis-markers t)
  ;; 高亮latex语法
  (org-highlight-latex-and-related '(native script entities))
  ;; 以UTF-8显示
  (org-pretty-entities t)
  ;; 是否隐藏标题栏的前置星号，这里我们通过org-modern来隐藏
  ;; (org-hide-leading-stars t)
  ;; 当启用缩进模式时自动隐藏前置星号
  (org-indent-mode-turns-on-hiding-stars t)
  ;; 自动启用缩进
  (org-startup-indented nil)
  ;; 根据标题栏自动缩进文本
  (org-adapt-indentation nil)
  ;; 自动显示图片
  (org-startup-with-inline-images t)
  ;; 默认以Overview的模式展示标题行
  (org-startup-folded 'overview)
  ;; 允许字母列表
  (org-list-allow-alphabetical t)
  ;; 列表的下一级设置
  (org-list-demote-modify-bullet '(
				   ("-"  . "+")
                                   ("+"  . "1.")
				   ("1." . "a.")
				   ))
  ;; 编辑时检查是否在折叠的不可见区域
  (org-fold-catch-invisible-edits 'smart)
  ;; 在当前位置插入新标题行还是在当前标题行后插入，这里设置为当前位置
  (org-insert-heading-respect-content nil)
  ;; 设置图片的最大宽度，如果有imagemagick支持将会改变图片实际宽度
  ;; 四种设置方法：(1080), 1080, t, nil
  (org-image-actual-width nil)
  ;; imenu的最大深度，默认为2
  (org-imenu-depth 4)
  ;; 回车要不要触发链接，这里设置不触发
  (org-return-follows-link nil)
  ;; 上标^下标_是否需要特殊字符包裹，这里设置需要用大括号包裹
  (org-use-sub-superscripts '{})
  ;; 复制粘贴标题行的时候删除id
  (org-clone-delete-id t)
  ;; 粘贴时调整标题行的级别
  (org-yank-adjusted-subtrees t)

  ;; TOOD的关键词设置，可以设置不同的组
  (org-todo-keywords '((sequence "TODO(t)" "HOLD(h!)" "WIP(i!)" "WAIT(w!)" "|" "DONE(d!)" "CANCELLED(c@/!)")
		       (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f!)")))
  ;; TODO关键词的样式设置
  (org-todo-keyword-faces '(("TODO"       :foreground "#7c7c75" :weight bold)
			    ("HOLD"       :foreground "#feb24c" :weight bold)
			    ("WIP"        :foreground "#0098dd" :weight bold)
			    ("WAIT"       :foreground "#9f7efe" :weight bold)
			    ("DONE"       :foreground "#50a14f" :weight bold)
			    ("CANCELLED"  :foreground "#ff6480" :weight bold)
			    ("REPORT"     :foreground "magenta" :weight bold)
			    ("BUG"        :foreground "red"     :weight bold)
			    ("KNOWNCAUSE" :foreground "yellow"  :weight bold)
			    ("FIXED"      :foreground "green"   :weight bold)))
  ;; 当标题行状态变化时标签同步发生的变化
  ;; Moving a task to CANCELLED adds a CANCELLED tag
  ;; Moving a task to WAIT adds a WAIT tag
  ;; Moving a task to HOLD adds WAIT and HOLD tags
  ;; Moving a task to a done state removes WAIT and HOLD tags
  ;; Moving a task to TODO removes WAIT, CANCELLED, and HOLD tags
  ;; Moving a task to DONE removes WAIT, CANCELLED, and HOLD tags
  (org-todo-state-tags-triggers
   (quote (("CANCELLED" ("CANCELLED" . t))
	   ("WAIT" ("WAIT" . t))
	   ("HOLD" ("WAIT") ("HOLD" . t))
	   (done ("WAIT") ("HOLD"))
	   ("TODO" ("WAIT") ("CANCELLED") ("HOLD"))
	   ("DONE" ("WAIT") ("CANCELLED") ("HOLD")))))
  ;; 使用专家模式选择标题栏状态
  (org-use-fast-todo-selection 'expert)
  ;; 父子标题栏状态有依赖
  (org-enforce-todo-dependencies t)
  ;; 标题栏和任务复选框有依赖
  (org-enforce-todo-checkbox-dependencies t)
  ;; 优先级样式设置
  (org-priority-faces '((?A :foreground "red")
			(?B :foreground "orange")
			(?C :foreground "yellow")))
  ;; 标题行全局属性设置
  (org-global-properties '(("EFFORT_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00")
			   ("APPT_WARNTIME_ALL" . "0 5 10 15 20 25 30 45 60")
			   ("RISK_ALL" . "Low Medium High")
			   ("STYLE_ALL" . "habit")))
  ;; Org columns的默认格式
  (org-columns-default-format "%25ITEM %TODO %SCHEDULED %DEADLINE %3PRIORITY %TAGS %CLOCKSUM %EFFORT{:}")
  ;; 当状态从DONE改成其他状态时，移除 CLOSED: [timestamp]
  (org-closed-keep-when-no-todo t)
  ;; DONE时加上时间戳
  (org-log-done 'time)
  ;; 重复执行时加上时间戳
  (org-log-repeat 'time)
  ;; Deadline修改时加上一条记录
  (org-log-redeadline 'note)
  ;; Schedule修改时加上一条记录
  (org-log-reschedule 'note)
  ;; 以抽屉的方式记录
  (org-log-into-drawer t)
  ;; 紧接着标题行或者计划/截止时间戳后加上记录抽屉
  (org-log-state-notes-insert-after-drawers nil)

  ;; refile使用缓存
  (org-refile-use-cache t)
  ;; refile的目的地，这里设置的是agenda文件的所有标题
  (org-refile-targets '((org-agenda-files . (:maxlevel . 9))))
  ;; 将文件名加入到路径
  (org-refile-use-outline-path 'file)
  ;; 是否按步骤refile
  (org-outline-path-complete-in-steps nil)
  ;; 允许创建新的标题行，但需要确认
  (org-refile-allow-creating-parent-nodes 'confirm)

  ;; 设置标签的默认位置，默认是第77列右对齐
  ;; (org-tags-column -77)
  ;; 自动对齐标签
  (org-auto-align-tags t)
  ;; 标签不继承
  (org-use-tag-inheritance nil)
  ;; 在日程视图的标签不继承
  (org-agenda-use-tag-inheritance nil)
  ;; 标签快速选择
  (org-use-fast-tag-selection t)
  ;; 标签选择不需要回车确认
  (org-fast-tag-selection-single-key t)
  ;; 定义了有序属性的标题行也加上 OREDERD 标签
  (org-track-ordered-property-with-tag t)
  ;; 始终存在的的标签
  (org-tag-persistent-alist '(("read"     . ?r)
			      ("mail"     . ?m)
			      ("emacs"    . ?e)
			      ("study"    . ?s)
			      ("work"     . ?w)))
  ;; 预定义好的标签
  (org-tag-alist '((:startgroup)
		   ("crypt"    . ?c)
		   ("linux"    . ?l)
		   ("apple"    . ?a)
		   ("noexport" . ?n)
		   ("ignore"   . ?i)
		   ("TOC"      . ?t)
		   (:endgroup)))

  ;; 归档设置
  (org-archive-location "%s_archive::datetree/")
  )

(global-set-key (kbd "C-c SPC") 'org-mark-ring-goto)

;; Org mode的附加包，有诸多附加功能
(use-package org-contrib
  :ensure t)
#+END_SRC
** Org-modern
#+BEGIN_SRC emacs-lisp
(use-package org-modern
  :ensure t
  :hook (after-init . (lambda ()
                        (setq org-modern-hide-stars 'leading)
                        (global-org-modern-mode t)))
  :config
  ;; 标题行型号字符
  (setq org-modern-star ["◉" "○" "✸" "✳" "◈" "◇" "✿" "❀" "✜"])
  ;; 额外的行间距，0.1表示10%，1表示1px
  (setq-default line-spacing 0.1)
  ;; tag边框宽度，还可以设置为 `auto' 即自动计算
  (setq org-modern-label-border 1)
  ;; 设置表格竖线宽度，默认为3
  (setq org-modern-table-vertical 2)
  ;; 设置表格横线为0，默认为0.1
  (setq org-modern-table-horizontal 0)

   ;; 复选框美化
  (setq org-modern-checkbox
        '((?X . #("▢✓" 0 2 (composition ((2)))))
          (?- . #("▢–" 0 2 (composition ((2)))))
          (?\s . #("▢" 0 1 (composition ((1)))))))
  ;; 列表符号美化
  (setq org-modern-list
        '((?- . "•")
          (?+ . "◦")
          (?* . "▹")))
  
  ;; 代码块类型美化，我们使用了 `prettify-symbols-mode'
  (setq org-modern-block-name nil)
  ;; #+关键字美化，我们使用了 `prettify-symbols-mode'
  (setq org-modern-keyword nil)
  )
#+END_SRC

** org-appear
#+BEGIN_SRC emacs-lis
(use-package org-appear
  :ensure t
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autolinks t)
  (setq org-appear-autosubmarkers t)
  (setq org-appear-autoentities t)
  (setq org-appear-autokeywords t)
  (setq org-appear-inside-latex t)
  )
#+END_SRC

** org-auto-tangle
#+BEGIN_SRC emacs-lis
(use-package org-auto-tangle
  :ensure t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t)
  )
#+END_SRC

** org-src
#+BEGIN_SRC emacs-lisp
(use-package org-src
  :ensure nil
  :hook (org-babel-after-execute . org-redisplay-inline-images)
  :bind (("s-l" . show-line-number-in-src-block)
         :map org-src-mode-map
         ("C-c C-c" . org-edit-src-exit))
  :init
  ;; 设置代码块的默认头参数
  (setq org-babel-default-header-args
        '(
          (:eval    . "never-export")     ; 导出时不执行代码块
          (:session . "none")
          (:results . "replace")          ; 执行结果替换
          (:exports . "both")             ; 导出代码和结果
          (:cache   . "no")
          (:noweb   . "no")
          (:hlines  . "no")
          (:wrap    . "results")          ; 结果通过#+begin_results包裹
          (:tangle  . "no")               ; 不写入文件
          ))
  :config
  ;; ==================================
  ;; 如果出现代码运行结果为乱码，可以参考：
  ;; https://github.com/nnicandro/emacs-jupyter/issues/366
  ;; ==================================
  (defun display-ansi-colors ()
    (ansi-color-apply-on-region (point-min) (point-max)))
  (add-hook 'org-babel-after-execute-hook #'display-ansi-colors)

  ;; ==============================================
  ;; 通过overlay在代码块里显示行号，s-l显示，任意键关闭
  ;; ==============================================
  (defvar number-line-overlays '()
    "List of overlays for line numbers.")

  (defun show-line-number-in-src-block ()
    (interactive)
    (save-excursion
      (let* ((src-block (org-element-context))
             (nlines (- (length
                         (s-split
                          "\n"
                          (org-element-property :value src-block)))
                        1)))
        (goto-char (org-element-property :begin src-block))
        (re-search-forward (regexp-quote (org-element-property :value src-block)))
        (goto-char (match-beginning 0))

        (cl-loop for i from 1 to nlines
                 do
                 (beginning-of-line)
                 (let (ov)
                   (setq ov (make-overlay (point) (point)))
                   (overlay-put ov 'before-string (format "%3s | " (number-to-string i)))
                   (add-to-list 'number-line-overlays ov))
                 (next-line))))

    ;; now read a char to clear them
    (read-key "Press a key to clear numbers.")
    (mapc 'delete-overlay number-line-overlays)
    (setq number-line-overlays '()))

  ;; =================================================
  ;; 执行结果后，如果结果所在的文件夹不存在将自动创建
  ;; =================================================
  (defun check-directory-exists-before-src-execution (orig-fun
                                                      &optional arg
                                                      info
                                                      params)
    (when (and (assq ':file (cadr (cdr (org-babel-get-src-block-info))))
               (member (car (org-babel-get-src-block-info)) '("mermaid" "ditaa" "dot" "lilypond" "plantuml" "gnuplot" "d2")))
      (let ((foldername (file-name-directory (alist-get :file (nth 2 (org-babel-get-src-block-info))))))
        (if (not (file-exists-p foldername))
            (mkdir foldername)))))
  (advice-add 'org-babel-execute-src-block :before #'check-directory-exists-before-src-execution)

  ;; =================================================
  ;; 自动给结果的图片加上相关属性
  ;; =================================================
  (setq original-image-width-before-del "400") ; 设置图片的默认宽度为400
  (setq original-caption-before-del "")        ; 设置默认的图示文本为空

  (defun insert-attr-decls ()
    "insert string before babel execution results"
    (insert (concat "\n#+CAPTION:"
                    original-caption-before-del
                    "\n#+ATTR_ORG: :width "
                    original-image-width-before-del
                    "\n#+ATTR_LATEX: :width "
                    (if (>= (/ (string-to-number original-image-width-before-del) 800.0) 1)
                        "1.0"
                      (number-to-string (/ (string-to-number original-image-width-before-del) 800.0)))
                    "\\linewidth :float nil"
                    "\n#+ATTR_HTML: :width "
                    original-image-width-before-del
                    )))

  (defun insert-attr-decls-at (s)
    "insert string right after specific string"
    (let ((case-fold-search t))
      (if (search-forward s nil t)
          (progn
            ;; (search-backward s nil t)
            (insert-attr-decls)))))

  (defun insert-attr-decls-at-results (orig-fun
                                       &optional arg
                                       info
                                       param)
    "insert extra image attributes after babel execution"
    (interactive)
    (progn
      (when (member (car (org-babel-get-src-block-info)) '("mermaid" "ditaa" "dot" "lilypond" "plantuml" "gnuplot" "d2"))
        (setq original-image-width-before-del (number-to-string (if-let* ((babel-width (alist-get :width (nth 2 (org-babel-get-src-block-info))))) babel-width (string-to-number original-image-width-before-del))))
        (save-excursion
          ;; `#+begin_results' for :wrap results, `#+RESULTS:' for non :wrap results
          (insert-attr-decls-at "#+begin_results")))
      (org-redisplay-inline-images)))
  (advice-add 'org-babel-execute-src-block :after #'insert-attr-decls-at-results)

  ;; 再次执行时需要将旧的图片相关参数行删除，并从中头参数中获得宽度参数，参考
  ;; https://emacs.stackexchange.com/questions/57710/how-to-set-image-size-in-result-of-src-block-in-org-mode
  (defun get-attributes-from-src-block-result (&rest args)
    "get information via last babel execution"
    (let ((location (org-babel-where-is-src-block-result))
          ;; 主要获取的是图示文字和宽度信息，下面这个正则就是为了捕获这两个信息
          (attr-regexp "[:blank:]*#\\+\\(ATTR_ORG: :width \\([0-9]\\{3\\}\\)\\|CAPTION:\\(.*\\)\\)"))
      (setq original-caption-before-del "") ; 重置为空
      (when location
        (save-excursion
          (goto-char location)
          (when (looking-at (concat org-babel-result-regexp ".*$"))
            (next-line 2)               ; 因为有个begin_result的抽屉，所以往下2行
            ;; 通过正则表达式来捕获需要的信息
            (while (looking-at attr-regexp)
              (when (match-string 2)
                (setq original-image-width-before-del (match-string 2)))
              (when (match-string 3)
                (setq original-caption-before-del (match-string 3)))
              (next-line)               ; 因为设置了:wrap，所以这里不需要删除这一行
              )
            )))))
  (advice-add 'org-babel-execute-src-block :before #'get-attributes-from-src-block-result)

  :custom
  ;; 代码块语法高亮
  (org-src-fontify-natively t)
  ;; 使用编程语言的TAB绑定设置
  (org-src-tab-acts-natively t)
  ;; 保留代码块前面的空格
  (org-src-preserve-indentation t)
  ;; 代码块编辑窗口的打开方式：当前窗口+代码块编辑窗口
  (org-src-window-setup 'reorganize-frame)
  ;; 执行前是否需要确认
  (org-confirm-babel-evaluate nil)
  ;; 代码块默认前置多少空格
  (org-edit-src-content-indentation 0)
  ;; 代码块的语言模式设置，设置之后才能正确语法高亮
  (org-src-lang-modes '(("C"            . c)
                        ("C++"          . c++)
                        ("bash"         . sh)
                        ("cpp"          . c++)
                        ("elisp"        . emacs-lisp)
                        ("python"       . python)
                        ("shell"        . sh)
                        ("mysql"        . sql)
                        ))
  ;; 在这个阶段，只需要加载默认支持的语言
  (org-babel-load-languages '((python          . t)
                              (awk             . t)
                              (C               . t)
                              (calc            . t)
                              (emacs-lisp      . t)
                              (eshell          . t)
                              (shell           . t)
                              (sql             . t)
                              (css             . t)
                              ))
  )
#+END_SRC

** limit the babel result length
#+BEGIN_SRC emacs-lisp
;; limit the babel result length
(defvar org-babel-result-lines-limit 40)
(defvar org-babel-result-length-limit 6000)

(defun org-babel-insert-result@limit (orig-fn result &rest args)
  (if (not (member (car (org-babel-get-src-block-info)) '("jupyter-python"))) ; not for jupyter-python etc.
    (if (and result (or org-babel-result-lines-limit org-babel-result-length-limit))
        (let (new-result plines plenght limit)
          (with-temp-buffer
            (insert result)
            (setq plines (if org-babel-result-lines-limit
                             (goto-line org-babel-result-lines-limit)
                           (point-max)))
            (setq plenght (if org-babel-result-length-limit
                              (min org-babel-result-length-limit (point-max))
                            (point-max)))
            (setq limit (min plines plenght))
            (setq new-result (concat (buffer-substring (point-min) limit)
                                     (if (< limit (point-max)) "..."))))
          (apply orig-fn new-result args))
      (apply orig-fn result args))
    (apply orig-fn result args)))

(advice-add 'org-babel-insert-result :around #'org-babel-insert-result@limit)
#+END_SRC

** 导出为中文
#+BEGIN_SRC emacs-lisp
;; 使用xelatex，配合当前org文件最开始的配置来正常输出中文
(setq org-latex-pdf-process
      '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

;; 图片默认宽度
(setq org-image-actual-width '(400))
#+END_SRC

** org-download实现粘贴复制图片到orgmode

#+BEGIN_SRC emacs-lisp
(use-package org-download
  :ensure t
  :defer t ;; 延迟加载
  :bind
  (:map org-mode-map
   ("C-M-y" . org-download-clipboard)) ;; 绑定从剪贴版粘贴截图的快捷键
  :custom
  (org-download-heading-lvl 1) ;; 用一级标题给截图文件命名
  :config
  (setq-default org-download-image-dir "./img")) ;; 用同级 ./img 目录放置截图文件

(add-hook 'dired-mode-hook 'org-download-enable)
#+END_SRC
** toc-org目录自动生成

[[https://github.com/snosov1/toc-org][toc-org]] 插件可以在Org文件里自动生成目录，只需给一个标题行设置一个标签为 =toc= 或 =toc_2= 即可（后者只生成2层）。

#+BEGIN_SRC emacs-lisp
(use-package toc-org
  :ensure t
  :hook (org-mode . toc-org-mode))
#+END_SRC

** ol新增链接类型

[[google:Org mode][google Org mode]]

#+BEGIN_SRC emacs-lisp
(use-package ol
  :ensure nil
  :defer t
  :custom
  (org-link-keep-stored-after-insertion t)
  (org-link-abbrev-alist '(("github"        . "https://github.com/")
                           ("gitlab"        . "https://gitlab.com/")
                           ("google"        . "https://google.com/search?q=")
                           ("baidu"         . "https://baidu.com/s?wd=")
                           ("rfc"           . "https://tools.ietf.org/html/")
                           ("wiki"          . "https://en.wikipedia.org/wiki/")
                           ("youtube"       . "https://youtube.com/watch?v=")
                           ("zhihu"         . "https://zhihu.com/question/"))))
#+END_SRC

** org mode自动更新时间
#+BEGIN_SRC emacs-lisp
(defun update-org-date ()
  "Update the DATE property to the current date."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (when (re-search-forward "^#\\+DATE:.*$" nil t)
      (replace-match (format-time-string "#+DATE: <%Y-%m-%d %a>" (current-time))))))
  
(defun my-org-mode-config ()
  "Custom configurations for Org Mode."
  (add-hook 'before-save-hook 'update-org-date nil t))
  
(add-hook 'org-mode-hook 'my-org-mode-config)
#+END_SRC

** init-org.el 文件尾
#+BEGIN_SRC emacs-lisp

(provide 'init-org)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-org.el ends here
#+END_SRC

* init-complete
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-complete.el :mkdirp yes
:END:
编辑设置

** init-complete.el文件头
#+BEGIN_SRC emacs-lisp
;;; init-complete.el -- hugo settings -*-  lexical-binding: t -*-
;;; Commentary:

;;; Code:
#+END_SRC

** vertico
#+BEGIN_SRC emacs-lisp
(use-package vertico
  :ensure t
  :hook (after-init . vertico-mode)
  :bind (:map minibuffer-local-map
              ("M-<DEL>" . my/minibuffer-backward-kill)
              :map vertico-map
              ("M-q" . vertico-quick-insert)) ; use C-g to exit
  :config
  (defun my/minibuffer-backward-kill (arg)
    "When minibuffer is completing a file name delete up to parent
folder, otherwise delete a word"
    (interactive "p")
    (if minibuffer-completing-file-name
        ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
        (if (string-match-p "/." (minibuffer-contents))
            (zap-up-to-char (- arg) ?/)
          (delete-minibuffer-contents))
      (backward-kill-word arg)))

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  (setq vertico-cycle t)                ; cycle from last to first
  :custom
  (vertico-count 15)                    ; number of candidates to display, default is 10
  )
#+END_SRC

** marginalia

#+BEGIN_SRC emacs-lisp
(use-package marginalia
  :ensure t
  :hook (after-init . marginalia-mode)
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))
#+END_SRC

** company-mode
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  ;; :hook
  ;; (python-mode . company-mode)
  ;; (LaTeX-mode . company-mode)
  ;; (c-mode-hook . company-mode)
  ;; (c++-mode-hook . company-mode)
  ;; :config
  ;; (setq company-tooltip-align-annotations t)
  ;; (setq company-minimum-prefix-length 1)
  ;; (setq company-idle-delay 0.0)
  ;; (setq company-show-numbers t
  ;;      )
  )
#+END_SRC

** corfu
#+BEGIN_SRC emacs-lisp
;; 使用 `use-package` 来安装和配置 `corfu`
(use-package corfu
  :ensure t
  :custom
  (corfu-separator ?\s)  
  :hook
  (LaTeX-mode . corfu-mode)
  (c-mode . corfu-mode)
  (rust-mode . corfu-mode)
  (shell-mode . corfu-mode)
  (eshell-mode . corfu-mode)
  :config
  (setq corfu-cycle t) ;; 允许在候选项之间循环
  (setq corfu-auto t) ;; 自动显示补全候选项
  (setq corfu-quit-at-boundary t) ;; 当光标在补全边界时，退出补全界面
)
#+END_SRC

** cape

#+BEGIN_SRC emacs-lisp
(use-package cape
  :ensure t
  ;; Bind dedicated completion commands
  ;; Alternative prefix keys: C-c p, M-p, M-+, ...
  :bind (("C-c p p" . completion-at-point) ;; capf
         ("C-c p t" . complete-tag)        ;; etags
         ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
         ("C-c p h" . cape-history)
         ("C-c p f" . cape-file)
         ("C-c p k" . cape-keyword)
         ("C-c p s" . cape-symbol)
         ("C-c p a" . cape-abbrev)
         ("C-c p l" . cape-line)
         ("C-c p w" . cape-dict)
         ("C-c p \\" . cape-tex)
         ("C-c p _" . cape-tex)
         ("C-c p ^" . cape-tex)
         ("C-c p &" . cape-sgml)
         ("C-c p r" . cape-rfc1345))
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  ;; NOTE: The order matters!
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  (add-to-list 'completion-at-point-functions #'cape-history)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  (add-to-list 'completion-at-point-functions #'cape-tex)
  (add-to-list 'completion-at-point-functions #'cape-sgml)
  (add-to-list 'completion-at-point-functions #'cape-rfc1345)
  (add-to-list 'completion-at-point-functions #'cape-abbrev)
  (add-to-list 'completion-at-point-functions #'cape-dict)
  (add-to-list 'completion-at-point-functions #'cape-symbol)
  (add-to-list 'completion-at-point-functions #'cape-line)
)
#+END_SRC

** orderless
#+BEGIN_SRC emacs-lisp
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+END_SRC

** eglot
#+BEGIN_SRC emacs-lisp
(use-package eglot
  :ensure t
  :config
  (add-to-list 'eglot-server-programs '((Latex-mode) "texlab"))
  (add-to-list 'eglot-server-programs '(python-mode . ("pyright-langserver")))
  (add-hook 'LaTeX-mode-hook 'eglot-ensure)
  (add-hook 'python-mode-hook 'eglot-ensure)
  (add-hook 'c-mode-hook 'eglot-ensure)
  (add-hook 'rust-mode-hook 'eglot-ensure)
  )
#+END_SRC

** treesite auto
#+BEGIN_SRC emacs-lisp
(use-package treesit-auto
  :ensure t
  :config
  (global-treesit-auto-mode))
#+END_SRC

** quickrun
#+BEGIN_SRC emacs-lisp
(use-package quickrun
    :ensure t
    :commands (quickrun)
    )
#+END_SRC

** yasnippet
#+BEGIN_SRC emacs-lisp
;; yasnippet settings
(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  :hook ((after-init . yas-reload-all)
         ((prog-mode LaTeX-mode org-mode) . yas-minor-mode))
  :config
  ;; Suppress warning for yasnippet code.
  (require 'warnings)
  (add-to-list 'warning-suppress-types '(yasnippet backquote-change))

  (setq yas-prompt-functions '(yas-x-prompt yas-dropdown-prompt))
  (defun smarter-yas-expand-next-field ()
    "Try to `yas-expand' then `yas-next-field' at current cursor position."
    (interactive)
    (let ((old-point (point))
          (old-tick (buffer-chars-modified-tick)))
      (yas-expand)
      (when (and (eq old-point (point))
                 (eq old-tick (buffer-chars-modified-tick)))
        (ignore-errors (yas-next-field))))))

#+END_SRC

** 括号补全
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :ensure t
  :config
  (add-hook 'org-mode-hook 'smartparens-mode)
  (add-hook 'LaTeX-mode-hook 'smartparens-mode)
  (add-hook 'rust-mode-hook 'smartparens-mode)
  )

(use-package smartparens-config
  :ensure smartparens
  :config
  (progn
    (show-smartparens-global-mode t))
  (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
  (add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)
  )
#+END_SRC

** init-complete.el 文件尾
#+BEGIN_SRC emacs-lisp

(provide 'init-complete)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-complete.el ends here
#+END_SRC

* init-tools
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-tools.el :mkdirp yes
:END:
工具设置

** init-tools.el文件头
#+BEGIN_SRC emacs-lisp
;;; init-tools.el -- hugo settings -*-  lexical-binding: t -*-
;;; Commentary:

;;; Code:
#+END_SRC
** helpful帮助增强
#+BEGIN_SRC emacs-lisp
(use-package helpful
  :ensure t
  :commands (helpful-callable helpful-variable helpful-command helpful-key helpful-mode)
  :bind (([remap describe-command] . helpful-command)
         ("C-h f" . helpful-callable)
         ("C-h v" . helpful-variable)
         ("C-h s" . helpful-symbol)
         ("C-h S" . describe-syntax)
         ("C-h m" . describe-mode)
         ("C-h F" . describe-face)
         ([remap describe-key] . helpful-key))
  )
#+END_SRC

** which-key快捷键
#+BEGIN_SRC emacs-lisp
;; 使用 use-package 来配置 which-key
(use-package which-key
  :ensure t
  :config
  ;; 启用 which-key
  (which-key-mode)

  ;; 设置 which-key 弹出的延迟时间（可选）
  (setq which-key-idle-delay 0.5)

  ;; 设置 which-key 弹出窗口的位置（可选）
  ;; 'bottom 表示在 Emacs 窗口底部显示，'right 则在右侧显示
  (setq which-key-side-window-location 'bottom)

  ;; 设置 which-key 显示的个数（可选）
  ;; 默认为 3，如果你希望显示更多键绑定，可以增加此值
  (setq which-key-show-remaining-keys 5)

  ;; 设置 which-key 显示的特殊按键（可选）
  ;; 这里将 F1-F9、C-x和M-x 的键绑定隐藏起来
  (setq which-key-special-keys '("SPC" "TAB" "RET" "ESC" "DEL"))

  ;; 自定义 which-key 的外观（可选）
  ;; 以下是设置 which-key 弹出窗口的宽度和颜色
  (setq which-key-popup-type 'side-window)
  (setq which-key-side-window-max-width 0.33)
  (setq which-key-side-window-background nil)

  ;; 设置 which-key 的排除列表（可选）
  ;; 指定一些模式或命令在 which-key 弹出窗口中不显示
  ;; 这里的例子将 ivy-mode、dired-mode 和 neotree-mode 排除在外
  (setq which-key-compute-remaps nil)
  (setq which-key-compute-prefixes nil)
  (setq which-key-compute-prefixes-function 'which-key-compute-prefixes-default)

  ;; 在 minibuffer 中显示 which-key 提示（可选）
  (setq which-key-show-prefix 'bottom)
  (setq which-key-min-display-lines 6)
  
  ;; 自定义 which-key 提示的外观（可选）
  (setq which-key-separator " → ")
  (setq which-key-prefix-prefix "+")
  
  ;; 如果你希望在某些模式下禁用 which-key，可以使用下面的钩子函数（可选）
  ;; (add-hook 'some-mode-hook (lambda () (which-key-mode -1)))
  )

;; 最后加载配置
(use-package which-key
  :ensure t
  :config
  (which-key-mode))

#+END_SRC


** DocView
#+BEGIN_SRC emacs-lisp
(setq doc-view-resolution 300) ; 设置分辨率，根据需要进行调整
#+END_SRC
** eaf-pdf
#+BEGIN_SRC emacs-lisp
;; Check if running in Emacs server mode
(defvar running-in-server (daemonp))

(unless running-in-server
  (use-package eaf
    :load-path "~/emacs-application-framework"
    :config
    (require 'eaf-browser)
    (require 'eaf-video-player)
    (require 'eaf-file-manager)
    (require 'eaf-image-viewer)
    (require 'eaf-pdf-viewer)          ; 启用PDF阅读器
    )
)
#+END_SRC

** org-ai
#+BEGIN_SRC emacs-lisp
(use-package org-ai
  :ensure t
  :commands (org-ai-mode
             org-ai-global-mode)
  :bind (
         ("C-c q" . org-ai-prompt)
         ("C-c x" . org-ai-on-region)
         )
  :hook (org-mode . org-ai-mode)
  :config
  (setq org-ai-default-chat-system-prompt "You are an Emacs helper, please reply me in Org-mode format")
  (org-ai-install-yasnippets)
  )

(load-file "~/.emacs.d/keys/chatai-key.el")
(require 'chatai-key)
#+END_SRC

** org-roam
#+BEGIN_SRC emacs-lisp
(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory (file-truename "~/org-roam"))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ("C-c n u" . org-roam-ui-open)
         ;; Dailies
         ("C-c n j" . org-roam-dailies-capture-today))
  :bind-keymap
  ("C-c n d" . org-roam-dailies-map) ;; 日记菜单
  :config
  (require 'org-roam-dailies)
  ;;============= 新增内容 =================
  ;; 下面的 (setq my/ref-template ...) 可以放到 use-package 代码块之外
  (setq my/ref-template
        (concat "#+FILETAGS: reading research \n"
                "- tags :: %^{keywords} \n"
                "* %^{title}\n"
                ":PROPERTIES:\n"
                ":Custom_ID: %^{citekey}\n"
                ":URL: %^{url}\n"
                ":AUTHOR: %^{author-or-editor}\n"
                ":NOTER_DOCUMENT: ~/Nutstore Files/zotero-lib/%^{citekey}.pdf\n"
                ":NOTER_PAGE:\n"
                ":END:"))
  (add-to-list 'org-roam-capture-templates
               `("r" "Zotero 文献模板" plain ; 文献笔记模板
                 ,my/ref-template
                 :target
                 (file+head "ref/${citekey}.org" "#+title: ${title}\n")))

  (setq org-roam-capture-templates
        '(("n" "笔记" plain "%?"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                              "#+title: ${title}\n#+date: %U\n")
           :unnarrowed t)))


  ;;============= 新增内容结束 =================
  ;; If you're using a vertical completion framework, you might want a more informative completion interface
  ;; (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  ;;(require 'org-roam-protocol)
  )

(use-package org-roam-ui
  :ensure t
  :after org-roam
  :custom
  (org-roam-ui-sync-theme t)
  (org-roam-ui-follow-mode t)
  )
#+END_SRC

** rime
#+BEGIN_SRC emacs-lisp
(use-package rime
  :ensure t
  
  :custom
  (default-input-method "rime")

  :config
  (global-set-key (kbd "C-\\") 'toggle-input-method)
  )
#+END_SRC

** plantuml绘图
#+BEGIN_SRC emacs-lisp
(use-package plantuml-mode
  :ensure t
  :mode ("\\.plantuml\\'" . plantuml-mode)
  :init
  ;; enable plantuml babel support
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (org-babel-do-load-languages 'org-babel-load-languages
                               (append org-babel-load-languages
                                       '((plantuml . t))))
  :config
  (setq org-plantuml-exec-mode 'plantuml)
  (setq org-plantuml-executable-path "plantuml")
  (setq plantuml-executable-path "plantuml")
  (setq plantuml-default-exec-mode 'executable)
  ;; set default babel header arguments
  (setq org-babel-default-header-args:plantuml
        '((:exports . "results")
          (:results . "file")
          ))
  )

(use-package gnuplot
  :ensure t
  :mode ("\\.gp$" . gnuplot-mode)
  :init
  (add-to-list 'org-src-lang-modes '("gnuplot" . gnuplot))
  (org-babel-do-load-languages 'org-babel-load-languages
                               (append org-babel-load-languages
                                       '((gnuplot . t))))
  :config
  ;; (add-to-list 'auto-mode-alist '("\\.gp$" . gnuplot-mode))
   (setq org-babel-default-header-args:gnuplot
        '((:exports . "results")
          (:results . "file")))
  )
#+END_SRC

** org-capture快速记录设置
#+BEGIN_SRC emacs-lisp
(use-package org-capture
  :ensure nil
  :bind ("\e\e c" . (lambda () (interactive) (org-capture)))
  :hook ((org-capture-mode . (lambda ()
                               (setq-local org-complete-tags-always-offer-all-agenda-tags t)))
         (org-capture-mode . delete-other-windows))
  :custom
  (org-capture-use-agenda-date nil)
  ;; define common template
  (org-capture-templates `(("t" "Tasks" entry (file+headline "tasks.org" "Reminders")
                            "* TODO %i%?"
                            :empty-lines-after 1
                            :prepend t)
                           ("n" "Notes" entry (file+headline "capture.org" "Notes")
                            "* %? %^g\n%i\n"
                            :empty-lines-after 1)
                           ;; For EWW
                           ("b" "Bookmarks" entry (file+headline "capture.org" "Bookmarks")
                            "* %:description\n\n%a%?"
                            :empty-lines 1
                            :immediate-finish t)
                           ("d" "Diary")
                           ("dt" "Today's TODO list" entry (file+olp+datetree "diary.org")
                            "* Today's TODO list [/]\n%T\n\n** TODO %?"
                            :empty-lines 1
                            :jump-to-captured t)
                           ("do" "Other stuff" entry (file+olp+datetree "diary.org")
                            "* %?\n%T\n\n%i"
                            :empty-lines 1
                            :jump-to-captured t)
                           ))
  )
#+END_SRC

** init-tools.el 文件尾
#+BEGIN_SRC emacs-lisp

(provide 'init-tools)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-tools.el ends here
#+END_SRC

* init-language
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-language.el :mkdirp yes
:END:
编程语言设置
** Python-mode
#+BEGIN_SRC emacs-lisp
(use-package python
  :ensure t
)

;; Configure elpy
(use-package elpy
  :ensure t
  :init
  (elpy-enable)
  :config
  (setq elpy-rpc-python-command "python3"))

(use-package pyvenv
  :ensure t
  :after python
  :config
  (setenv "WORKON_HOME" "/home/elon/.conda/envs/")
  (add-hook 'python-mode-hook 'pyvenv-mode))
#+END_SRC

** Latex配置
#+BEGIN_SRC emacs-lisp
(defun my/latex-hook ()
  (interactive)
  (turn-on-cdlatex)
  (turn-on-reftex))

(use-package tex
  :ensure auctex
  :custom
  (TeX-parse-self t) ; 自动解析 tex 文件
  (TeX-PDF-mode t)
  (TeX-DVI-via-PDFTeX t)
  :config
  (setq-default TeX-master t) ; 默认询问主文件
  (setq TeX-source-correlate-mode t) ;; 编译后开启正反向搜索
  (setq TeX-source-correlate-method 'synctex) ;; 正反向搜索的执行方式
  (setq TeX-source-correlate-start-server t) ;; 不再询问是否开启服务器以执行反向搜索
  ;;;LaTeX config
  (add-to-list 'TeX-command-list '("XeLaTeX" "%`xelatex -shell-escape --synctex=1%(mode)%' %t" TeX-run-TeX nil t))
  (add-to-list 'TeX-view-program-list '("eaf" eaf-pdf-synctex-forward-view))
  (add-to-list 'TeX-view-program-selection '(output-pdf "eaf"))

  (add-hook 'LaTeX-mode-hook 'my/latex-hook)
  ) ; 加载LaTeX模式钩子

(use-package cdlatex
  :ensure t
  :defer t
  :config
  (add-hook 'org-mode-hook 'org-cdlatex-mode)
  ) ;; 在 LaTeX 模式下自动开启 cdlatex

(use-package texfrag
  :ensure t
  :hook (org-mode . texfrag-mode)
  :config
  (setq texfrag-extensions '("pdf"))
  (setq texfrag-dpi 900))

(use-package org-fragtog
  :ensure t
  :after org
  :hook
  (org-mode . org-fragtog-mode))
#+END_SRC

** Vterm
#+BEGIN_SRC emacs-lisp
(defun my/vterm-below ()
  (interactive)
  (split-window-below)
  (other-window 1)
  (window-resize (selected-window) -7 nil)
  (vterm))

(use-package vterm
    :ensure t
    :bind (("C-c t" .  my/vterm-below)))
#+END_SRC

** Emacs Lisp-mode
#+BEGIN_SRC emacs-lisp
(use-package elisp-mode
  :ensure nil
  :after org
  :bind (:map emacs-lisp-mode-map
              ("C-c C-b" . eval-buffer)
              ("C-c C-c" . eval-to-comment)
              :map lisp-interaction-mode-map
              ("C-c C-c" . eval-to-comment)
              :map org-mode-map
              ("C-c C-;" . eval-to-comment)
              )
  :init
  ;; for emacs-lisp org babel
  (add-to-list 'org-babel-default-header-args:emacs-lisp
             '(:results . "value pp"))
  :config
  (defconst eval-as-comment-prefix " ⇒ ")
  (defun eval-to-comment (&optional arg)
    (interactive "P")
    ;; (if (not (looking-back ";\\s*"))
    ;;     (call-interactively 'comment-dwim))
    (call-interactively 'comment-dwim)
    (progn
      (search-backward ";")
      (forward-char 1))
    (delete-region (point) (line-end-position))
    (save-excursion
      (let ((current-prefix-arg '(4)))
        (call-interactively 'eval-last-sexp)))
    (insert eval-as-comment-prefix)
    (end-of-line 1))
  )
#+END_SRC
** Rust-mode
#+BEGIN_SRC emacs-lisp
;; Rust 开发配置
(use-package rust-mode
  :ensure t
  :config
  (setq rust-format-on-save t)
  ;; 设置 Rust 语言的执行命令
  (setq org-babel-rust-command "rustc")
  (org-babel-do-load-languages 'org-babel-load-languages
                               (append org-babel-load-languages
                                       '((rust . t))))
  (add-hook 'rust-mode-hook
           (lambda () (prettify-symbols-mode))))

(use-package cargo
  :ensure t
  :hook (rust-mode . cargo-minor-mode))

(use-package ob-rust
  :ensure t)
#+END_SRC
** Lua-moode
#+BEGIN_SRC emacs-lisp
(use-package lua-mode
  :ensure t)
#+END_SRC
** C/Cpp-mode
#+BEGIN_SRC emacs-lisp
 (use-package cc-mode
  :ensure t
  :config
  ;; 配置代码风格
  (setq c-default-style "linux"
        c-basic-offset 4
        tab-width 4
        indent-tabs-mode t)
  
  ;; 设置快捷键
  (define-key c-mode-base-map (kbd "RET") 'newline-and-indent))
#+END_SRC、
** init-language.el 文件尾
#+BEGIN_SRC emacs-lisp

(provide 'init-language)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-language.el ends here
#+END_SRC
* init-hugo.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-hugo.el :mkdirp yes
:END:
hugo设置

** init-hugo.el文件头
#+BEGIN_SRC emacs-lisp
;;; init-hugo.el -- hugo settings -*-  lexical-binding: t -*-
;;; Commentary:

;;; Code:
#+END_SRC

** ox-hugo
#+BEGIN_SRC emacs-lisp
(use-package ox-hugo
  :ensure t   ;Auto-install the package from Melpa
  :pin melpa  ;`package-archives' should already have ("melpa" . "https://melpa.org/packages/")
  :after ox)
#+END_SRC

** deploy-hugo
#+BEGIN_SRC emacs-lisp
(defun execute-hugo-deploy-script (args)
  "执行 deploy.sh 脚本文件并将结果输出到 *Shell Output* 缓冲区"
  (interactive "sArguments: ")
  (let ((script-file "/home/elon/hugo_blog/blogsite/deploy.sh"))
    (if (file-exists-p script-file)
        (progn
          (message "Running deploy.sh script...")
          (shell-command (concat script-file " " args) "*Shell Output*"))
      (message "deploy.sh script file not found"))))
#+END_SRC

** init-hugo.el 文件尾
#+BEGIN_SRC emacs-lisp

(provide 'init-hugo)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-dev.el ends here
#+END_SRC








